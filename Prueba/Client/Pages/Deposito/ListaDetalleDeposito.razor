@page "/Deposito"
@inject IHttpService http

<a class="btn btn primary" href="Administradores/agregar">Nuevo administrador</a>


<h3>Lista detalle del deposito</h3>


<table>

      <tr>
        <th>Codigo</th>
        <th>Categoria</th> 
        <th>Cantidad</th>

      </tr>

    
      @if (depositos == null)
      {
        <tr>Cargando.......</tr>
    
      }
      else if(depositos.Count==0)
      {
        <tr>No existen datos para cargar</tr>
    
      }
      else        
      {
          @foreach(var elemento in depositos)
          {
              <tr>
                  <td>@elemento.CodigoEstante</td>
                  <td>@elemento.CategoriaEnEstante</td>
                  <td>@elemento.CantidadEnEstante</td>
                  <td>
                      <a class="btn btn primary" 
                          href="Depositos/Editar/@elemento.Id">
                          Editar
                      </a>
                  </td>>
                  <td>
                      <button class="btn btn-warning" @onclick="()=>Eliminar(elemento)"> 
                          Borrar
                      </button>
                  </td>
              </tr>
          }
      }
</table>



<Funcionar @ref="funcionConfirmacion"
              verCancelar="true"
              verOk="true"
              textOk="Aceptar"
              Titulo="Borrar detalle del deposito"
              onCancel="Cancelar"
              onConfirm="Borrar">
              <div>
                  Está por borrar el detalle del deposito:  @DepositoBorrar.CodigoEstante
                  <br />
                  ¿Está seguro que desea continuar?
              </div>
</Funcionar>


@code
{
    List<Deposito> depositos=new List<Deposito>();

    Funcionar funcionConfirmacion;

    Deposito DepositoBorrar;

    protected override async Task OnInitializedAsync()
    {

        await base.OnInitializedAsync();

        await Leer();

    }

    private async Task Leer()
    {

        var respuesta = await http.Get<List<Deposito>>("api/Administradores");
        {
            //<T> es la lista de Administradores

            if (!respuesta.Error)
            {
                depositos = respuesta.Respuesta;
            }
        }
    }

    private void Eliminar(Deposito depositoBorrar)
    {
        DepositoBorrar = depositoBorrar;
        funcionConfirmacion.Ver();
    }

       private void Cancelar()
    {
        funcionConfirmacion.Ocultar();
        DepositoBorrar = null;
    }


    private async Task Borrar()
    {

        var respuesta = await http.Delete($"api/Especialidades/{DepositoBorrar.Id}");

        if(respuesta.Error)
        {
            var body = "Error";
        }
        Cancelar();
        await Leer();//vuelvo a leer la lista para que no tenga el elemento borrado

        //Con F12 puedo ver los errores en la consola del navegador
    }


}
