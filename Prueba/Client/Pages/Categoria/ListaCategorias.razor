@page "/Categoriaas"
@inject IHttpService http

<a class="btn btn primary" href="Categorias/agregar">Nueva categoria</a>


<h3>Lista de categorias</h3>


<table>

      <tr>
        <th>Tipo</th>
        <th>Codigo</th>
      </tr>

    
      @if (categorias == null)
      {
        <tr>Cargando.......</tr>
    
      }
      else if(categorias.Count==0)
      {
        <tr>No existen datos para cargar</tr>
    
      }
      else        
      {
          @foreach(var elemento in categorias)
          {
              <tr>
                  <td>@elemento.TipoCategoria</td>
                  <td>@elemento.CodigoCategoria</td>
                  <td>
                      <a class="btn btn primary" 
                          href="Categorias/Editar/@elemento.Id">
                          Editar
                      </a>
                  </td>>
                  <td>
                      <button class="btn btn-warning" @onclick="()=>Eliminar(elemento)"> 
                          Borrar
                      </button>
                  </td>
              </tr>
          }
      }
</table>



<Funcionar @ref="funcionConfirmacion"
              verCancelar="true"
              verOk="true"
              textOk="Aceptar"
              Titulo="Borrar categoria"
              onCancel="Cancelar"
              onConfirm="Borrar">
              <div>
                  Está por borrar la categoria:  @CategoriaBorrar.TipoCategoria
                  <br />
                  ¿Está seguro que desea continuar?
              </div>
</Funcionar>


@code
{
    List<Categoria> categorias=new List<Categoria>();

    Funcionar funcionConfirmacion;

    Categoria CategoriaBorrar;

    protected override async Task OnInitializedAsync()
    {

        await base.OnInitializedAsync();

        await Leer();

    }

    private async Task Leer()
    {

        var respuesta = await http.Get<List<Categoria>>("api/Categorias");
        {
            //<T> es la lista de Administradores

            if (!respuesta.Error)
            {
                categorias = respuesta.Respuesta;
            }
        }
    }

    private void Eliminar(Categoria categoriaBorrar)
    {
        CategoriaBorrar = categoriaBorrar;
        funcionConfirmacion.Ver();
    }

       private void Cancelar()
       {
           funcionConfirmacion.Ocultar();
        
           CategoriaBorrar = null;
       }


    private async Task Borrar()
    {

        var respuesta = await http.Delete($"api/Categorias/{CategoriaBorrar.Id}");

        if(respuesta.Error)
        {
            var body = "Error";
        }
        Cancelar();
        await Leer();//vuelvo a leer la lista para que no tenga el elemento borrado

        //Con F12 puedo ver los errores en la consola del navegador
    }


}